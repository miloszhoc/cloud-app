/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1871.0, "minX": 0.0, "maxY": 602491.0, "series": [{"data": [[0.0, 1871.0], [0.1, 1878.0], [0.2, 1918.0], [0.3, 1918.0], [0.4, 1944.0], [0.5, 1975.0], [0.6, 2015.0], [0.7, 2042.0], [0.8, 2084.0], [0.9, 2106.0], [1.0, 2128.0], [1.1, 2160.0], [1.2, 2181.0], [1.3, 2191.0], [1.4, 2191.0], [1.5, 2193.0], [1.6, 2207.0], [1.7, 2214.0], [1.8, 2226.0], [1.9, 2245.0], [2.0, 2262.0], [2.1, 2275.0], [2.2, 2279.0], [2.3, 2283.0], [2.4, 2298.0], [2.5, 2304.0], [2.6, 2320.0], [2.7, 2330.0], [2.8, 2343.0], [2.9, 2348.0], [3.0, 2349.0], [3.1, 2375.0], [3.2, 2384.0], [3.3, 2391.0], [3.4, 2406.0], [3.5, 2414.0], [3.6, 2418.0], [3.7, 2426.0], [3.8, 2442.0], [3.9, 2453.0], [4.0, 2462.0], [4.1, 2470.0], [4.2, 2472.0], [4.3, 2479.0], [4.4, 2500.0], [4.5, 2512.0], [4.6, 2514.0], [4.7, 2523.0], [4.8, 2525.0], [4.9, 2548.0], [5.0, 2564.0], [5.1, 2567.0], [5.2, 2579.0], [5.3, 2588.0], [5.4, 2601.0], [5.5, 2609.0], [5.6, 2619.0], [5.7, 2633.0], [5.8, 2642.0], [5.9, 2678.0], [6.0, 2697.0], [6.1, 2702.0], [6.2, 2705.0], [6.3, 2708.0], [6.4, 2713.0], [6.5, 2720.0], [6.6, 2722.0], [6.7, 2745.0], [6.8, 2746.0], [6.9, 2763.0], [7.0, 2766.0], [7.1, 2782.0], [7.2, 2802.0], [7.3, 2820.0], [7.4, 2869.0], [7.5, 2899.0], [7.6, 2902.0], [7.7, 2927.0], [7.8, 2933.0], [7.9, 2943.0], [8.0, 2952.0], [8.1, 2954.0], [8.2, 2959.0], [8.3, 2961.0], [8.4, 2964.0], [8.5, 2977.0], [8.6, 2990.0], [8.7, 2996.0], [8.8, 3000.0], [8.9, 3055.0], [9.0, 3062.0], [9.1, 3073.0], [9.2, 3078.0], [9.3, 3080.0], [9.4, 3088.0], [9.5, 3101.0], [9.6, 3102.0], [9.7, 3108.0], [9.8, 3109.0], [9.9, 3116.0], [10.0, 3122.0], [10.1, 3123.0], [10.2, 3124.0], [10.3, 3139.0], [10.4, 3152.0], [10.5, 3158.0], [10.6, 3163.0], [10.7, 3167.0], [10.8, 3185.0], [10.9, 3189.0], [11.0, 3192.0], [11.1, 3195.0], [11.2, 3203.0], [11.3, 3211.0], [11.4, 3218.0], [11.5, 3226.0], [11.6, 3227.0], [11.7, 3242.0], [11.8, 3246.0], [11.9, 3249.0], [12.0, 3249.0], [12.1, 3279.0], [12.2, 3280.0], [12.3, 3285.0], [12.4, 3287.0], [12.5, 3293.0], [12.6, 3310.0], [12.7, 3323.0], [12.8, 3335.0], [12.9, 3352.0], [13.0, 3381.0], [13.1, 3388.0], [13.2, 3391.0], [13.3, 3401.0], [13.4, 3404.0], [13.5, 3416.0], [13.6, 3435.0], [13.7, 3438.0], [13.8, 3439.0], [13.9, 3439.0], [14.0, 3450.0], [14.1, 3451.0], [14.2, 3466.0], [14.3, 3467.0], [14.4, 3486.0], [14.5, 3513.0], [14.6, 3520.0], [14.7, 3522.0], [14.8, 3555.0], [14.9, 3560.0], [15.0, 3562.0], [15.1, 3575.0], [15.2, 3593.0], [15.3, 3598.0], [15.4, 3603.0], [15.5, 3607.0], [15.6, 3613.0], [15.7, 3621.0], [15.8, 3627.0], [15.9, 3631.0], [16.0, 3634.0], [16.1, 3635.0], [16.2, 3661.0], [16.3, 3669.0], [16.4, 3672.0], [16.5, 3679.0], [16.6, 3683.0], [16.7, 3697.0], [16.8, 3698.0], [16.9, 3719.0], [17.0, 3721.0], [17.1, 3729.0], [17.2, 3736.0], [17.3, 3739.0], [17.4, 3741.0], [17.5, 3790.0], [17.6, 3790.0], [17.7, 3801.0], [17.8, 3801.0], [17.9, 3803.0], [18.0, 3822.0], [18.1, 3825.0], [18.2, 3830.0], [18.3, 3832.0], [18.4, 3853.0], [18.5, 3859.0], [18.6, 3888.0], [18.7, 3888.0], [18.8, 3908.0], [18.9, 3917.0], [19.0, 3921.0], [19.1, 3926.0], [19.2, 3926.0], [19.3, 3935.0], [19.4, 3951.0], [19.5, 3953.0], [19.6, 3953.0], [19.7, 3959.0], [19.8, 3986.0], [19.9, 3991.0], [20.0, 3992.0], [20.1, 3996.0], [20.2, 4004.0], [20.3, 4006.0], [20.4, 4006.0], [20.5, 4008.0], [20.6, 4016.0], [20.7, 4026.0], [20.8, 4038.0], [20.9, 4040.0], [21.0, 4063.0], [21.1, 4075.0], [21.2, 4078.0], [21.3, 4088.0], [21.4, 4088.0], [21.5, 4088.0], [21.6, 4088.0], [21.7, 4091.0], [21.8, 4100.0], [21.9, 4105.0], [22.0, 4106.0], [22.1, 4107.0], [22.2, 4108.0], [22.3, 4117.0], [22.4, 4124.0], [22.5, 4128.0], [22.6, 4130.0], [22.7, 4151.0], [22.8, 4166.0], [22.9, 4176.0], [23.0, 4180.0], [23.1, 4183.0], [23.2, 4191.0], [23.3, 4193.0], [23.4, 4201.0], [23.5, 4216.0], [23.6, 4221.0], [23.7, 4224.0], [23.8, 4250.0], [23.9, 4258.0], [24.0, 4282.0], [24.1, 4299.0], [24.2, 4312.0], [24.3, 4322.0], [24.4, 4344.0], [24.5, 4355.0], [24.6, 4366.0], [24.7, 4370.0], [24.8, 4398.0], [24.9, 4404.0], [25.0, 4420.0], [25.1, 4443.0], [25.2, 4447.0], [25.3, 4483.0], [25.4, 4486.0], [25.5, 4499.0], [25.6, 4504.0], [25.7, 4519.0], [25.8, 4530.0], [25.9, 4531.0], [26.0, 4542.0], [26.1, 4544.0], [26.2, 4546.0], [26.3, 4560.0], [26.4, 4561.0], [26.5, 4580.0], [26.6, 4587.0], [26.7, 4594.0], [26.8, 4604.0], [26.9, 4616.0], [27.0, 4624.0], [27.1, 4625.0], [27.2, 4631.0], [27.3, 4637.0], [27.4, 4643.0], [27.5, 4643.0], [27.6, 4644.0], [27.7, 4645.0], [27.8, 4657.0], [27.9, 4665.0], [28.0, 4672.0], [28.1, 4693.0], [28.2, 4703.0], [28.3, 4703.0], [28.4, 4729.0], [28.5, 4751.0], [28.6, 4753.0], [28.7, 4765.0], [28.8, 4779.0], [28.9, 4780.0], [29.0, 4782.0], [29.1, 4789.0], [29.2, 4797.0], [29.3, 4805.0], [29.4, 4805.0], [29.5, 4807.0], [29.6, 4814.0], [29.7, 4834.0], [29.8, 4844.0], [29.9, 4849.0], [30.0, 4858.0], [30.1, 4859.0], [30.2, 4865.0], [30.3, 4874.0], [30.4, 4883.0], [30.5, 4892.0], [30.6, 4902.0], [30.7, 4904.0], [30.8, 4907.0], [30.9, 4917.0], [31.0, 4926.0], [31.1, 4952.0], [31.2, 4969.0], [31.3, 4975.0], [31.4, 4993.0], [31.5, 5001.0], [31.6, 5022.0], [31.7, 5033.0], [31.8, 5035.0], [31.9, 5036.0], [32.0, 5052.0], [32.1, 5053.0], [32.2, 5058.0], [32.3, 5060.0], [32.4, 5064.0], [32.5, 5066.0], [32.6, 5087.0], [32.7, 5091.0], [32.8, 5110.0], [32.9, 5130.0], [33.0, 5155.0], [33.1, 5156.0], [33.2, 5174.0], [33.3, 5195.0], [33.4, 5199.0], [33.5, 5201.0], [33.6, 5221.0], [33.7, 5222.0], [33.8, 5230.0], [33.9, 5243.0], [34.0, 5244.0], [34.1, 5248.0], [34.2, 5252.0], [34.3, 5269.0], [34.4, 5277.0], [34.5, 5283.0], [34.6, 5287.0], [34.7, 5304.0], [34.8, 5318.0], [34.9, 5324.0], [35.0, 5329.0], [35.1, 5331.0], [35.2, 5332.0], [35.3, 5335.0], [35.4, 5345.0], [35.5, 5351.0], [35.6, 5355.0], [35.7, 5377.0], [35.8, 5377.0], [35.9, 5380.0], [36.0, 5381.0], [36.1, 5382.0], [36.2, 5406.0], [36.3, 5409.0], [36.4, 5409.0], [36.5, 5411.0], [36.6, 5412.0], [36.7, 5418.0], [36.8, 5421.0], [36.9, 5444.0], [37.0, 5455.0], [37.1, 5460.0], [37.2, 5466.0], [37.3, 5478.0], [37.4, 5483.0], [37.5, 5484.0], [37.6, 5488.0], [37.7, 5531.0], [37.8, 5539.0], [37.9, 5544.0], [38.0, 5551.0], [38.1, 5567.0], [38.2, 5578.0], [38.3, 5589.0], [38.4, 5606.0], [38.5, 5607.0], [38.6, 5648.0], [38.7, 5662.0], [38.8, 5669.0], [38.9, 5707.0], [39.0, 5726.0], [39.1, 5726.0], [39.2, 5735.0], [39.3, 5737.0], [39.4, 5749.0], [39.5, 5750.0], [39.6, 5751.0], [39.7, 5768.0], [39.8, 5787.0], [39.9, 5791.0], [40.0, 5799.0], [40.1, 5804.0], [40.2, 5817.0], [40.3, 5827.0], [40.4, 5829.0], [40.5, 5865.0], [40.6, 5888.0], [40.7, 5889.0], [40.8, 5891.0], [40.9, 5910.0], [41.0, 5919.0], [41.1, 5924.0], [41.2, 5929.0], [41.3, 5934.0], [41.4, 5952.0], [41.5, 5953.0], [41.6, 5956.0], [41.7, 5962.0], [41.8, 6001.0], [41.9, 6008.0], [42.0, 6016.0], [42.1, 6032.0], [42.2, 6037.0], [42.3, 6042.0], [42.4, 6060.0], [42.5, 6070.0], [42.6, 6073.0], [42.7, 6090.0], [42.8, 6095.0], [42.9, 6100.0], [43.0, 6102.0], [43.1, 6102.0], [43.2, 6110.0], [43.3, 6124.0], [43.4, 6144.0], [43.5, 6151.0], [43.6, 6200.0], [43.7, 6204.0], [43.8, 6226.0], [43.9, 6232.0], [44.0, 6252.0], [44.1, 6255.0], [44.2, 6263.0], [44.3, 6305.0], [44.4, 6309.0], [44.5, 6310.0], [44.6, 6317.0], [44.7, 6319.0], [44.8, 6323.0], [44.9, 6329.0], [45.0, 6333.0], [45.1, 6336.0], [45.2, 6366.0], [45.3, 6381.0], [45.4, 6396.0], [45.5, 6433.0], [45.6, 6466.0], [45.7, 6482.0], [45.8, 6486.0], [45.9, 6522.0], [46.0, 6535.0], [46.1, 6538.0], [46.2, 6547.0], [46.3, 6548.0], [46.4, 6555.0], [46.5, 6556.0], [46.6, 6585.0], [46.7, 6604.0], [46.8, 6605.0], [46.9, 6608.0], [47.0, 6611.0], [47.1, 6617.0], [47.2, 6618.0], [47.3, 6621.0], [47.4, 6623.0], [47.5, 6625.0], [47.6, 6628.0], [47.7, 6651.0], [47.8, 6651.0], [47.9, 6659.0], [48.0, 6692.0], [48.1, 6693.0], [48.2, 6701.0], [48.3, 6704.0], [48.4, 6729.0], [48.5, 6740.0], [48.6, 6759.0], [48.7, 6760.0], [48.8, 6771.0], [48.9, 6771.0], [49.0, 6789.0], [49.1, 6795.0], [49.2, 6795.0], [49.3, 6816.0], [49.4, 6830.0], [49.5, 6851.0], [49.6, 6865.0], [49.7, 6876.0], [49.8, 6887.0], [49.9, 6897.0], [50.0, 6899.0], [50.1, 6902.0], [50.2, 6925.0], [50.3, 6934.0], [50.4, 6936.0], [50.5, 6959.0], [50.6, 6971.0], [50.7, 6974.0], [50.8, 6980.0], [50.9, 6983.0], [51.0, 6985.0], [51.1, 6994.0], [51.2, 7024.0], [51.3, 7026.0], [51.4, 7027.0], [51.5, 7040.0], [51.6, 7053.0], [51.7, 7054.0], [51.8, 7102.0], [51.9, 7104.0], [52.0, 7107.0], [52.1, 7112.0], [52.2, 7160.0], [52.3, 7185.0], [52.4, 7187.0], [52.5, 7193.0], [52.6, 7197.0], [52.7, 7204.0], [52.8, 7208.0], [52.9, 7215.0], [53.0, 7221.0], [53.1, 7232.0], [53.2, 7244.0], [53.3, 7258.0], [53.4, 7279.0], [53.5, 7279.0], [53.6, 7329.0], [53.7, 7334.0], [53.8, 7411.0], [53.9, 7433.0], [54.0, 7437.0], [54.1, 7448.0], [54.2, 7518.0], [54.3, 7527.0], [54.4, 7564.0], [54.5, 7583.0], [54.6, 7626.0], [54.7, 7631.0], [54.8, 7637.0], [54.9, 7667.0], [55.0, 7699.0], [55.1, 7715.0], [55.2, 7733.0], [55.3, 7735.0], [55.4, 7745.0], [55.5, 7754.0], [55.6, 7769.0], [55.7, 7815.0], [55.8, 7821.0], [55.9, 7824.0], [56.0, 7838.0], [56.1, 7892.0], [56.2, 7914.0], [56.3, 7921.0], [56.4, 7927.0], [56.5, 7944.0], [56.6, 7949.0], [56.7, 7980.0], [56.8, 8004.0], [56.9, 8010.0], [57.0, 8026.0], [57.1, 8029.0], [57.2, 8031.0], [57.3, 8047.0], [57.4, 8060.0], [57.5, 8063.0], [57.6, 8082.0], [57.7, 8098.0], [57.8, 8100.0], [57.9, 8117.0], [58.0, 8118.0], [58.1, 8119.0], [58.2, 8127.0], [58.3, 8131.0], [58.4, 8171.0], [58.5, 8183.0], [58.6, 8199.0], [58.7, 8217.0], [58.8, 8221.0], [58.9, 8257.0], [59.0, 8295.0], [59.1, 8295.0], [59.2, 8320.0], [59.3, 8335.0], [59.4, 8337.0], [59.5, 8372.0], [59.6, 8406.0], [59.7, 8467.0], [59.8, 8478.0], [59.9, 8481.0], [60.0, 8487.0], [60.1, 8490.0], [60.2, 8518.0], [60.3, 8549.0], [60.4, 8558.0], [60.5, 8599.0], [60.6, 8605.0], [60.7, 8608.0], [60.8, 8609.0], [60.9, 8624.0], [61.0, 8627.0], [61.1, 8658.0], [61.2, 8689.0], [61.3, 8701.0], [61.4, 8701.0], [61.5, 8716.0], [61.6, 8740.0], [61.7, 8755.0], [61.8, 8778.0], [61.9, 8784.0], [62.0, 8818.0], [62.1, 8867.0], [62.2, 8872.0], [62.3, 8907.0], [62.4, 8928.0], [62.5, 8931.0], [62.6, 8936.0], [62.7, 8937.0], [62.8, 8971.0], [62.9, 8974.0], [63.0, 8996.0], [63.1, 8997.0], [63.2, 9005.0], [63.3, 9020.0], [63.4, 9048.0], [63.5, 9054.0], [63.6, 9065.0], [63.7, 9065.0], [63.8, 9080.0], [63.9, 9085.0], [64.0, 9087.0], [64.1, 9104.0], [64.2, 9116.0], [64.3, 9206.0], [64.4, 9219.0], [64.5, 9231.0], [64.6, 9250.0], [64.7, 9253.0], [64.8, 9265.0], [64.9, 9272.0], [65.0, 9281.0], [65.1, 9287.0], [65.2, 9301.0], [65.3, 9303.0], [65.4, 9312.0], [65.5, 9319.0], [65.6, 9328.0], [65.7, 9339.0], [65.8, 9348.0], [65.9, 9350.0], [66.0, 9360.0], [66.1, 9364.0], [66.2, 9370.0], [66.3, 9389.0], [66.4, 9401.0], [66.5, 9411.0], [66.6, 9426.0], [66.7, 9429.0], [66.8, 9434.0], [66.9, 9453.0], [67.0, 9455.0], [67.1, 9457.0], [67.2, 9468.0], [67.3, 9468.0], [67.4, 9509.0], [67.5, 9531.0], [67.6, 9548.0], [67.7, 9592.0], [67.8, 9595.0], [67.9, 9596.0], [68.0, 9601.0], [68.1, 9602.0], [68.2, 9622.0], [68.3, 9627.0], [68.4, 9695.0], [68.5, 9710.0], [68.6, 9716.0], [68.7, 9724.0], [68.8, 9726.0], [68.9, 9814.0], [69.0, 9831.0], [69.1, 9859.0], [69.2, 9870.0], [69.3, 9886.0], [69.4, 9912.0], [69.5, 9914.0], [69.6, 9942.0], [69.7, 10010.0], [69.8, 10022.0], [69.9, 10074.0], [70.0, 10085.0], [70.1, 10100.0], [70.2, 10119.0], [70.3, 10138.0], [70.4, 10146.0], [70.5, 10169.0], [70.6, 10202.0], [70.7, 10217.0], [70.8, 10247.0], [70.9, 10262.0], [71.0, 10265.0], [71.1, 10276.0], [71.2, 10293.0], [71.3, 10302.0], [71.4, 10335.0], [71.5, 10348.0], [71.6, 10380.0], [71.7, 10409.0], [71.8, 10414.0], [71.9, 10415.0], [72.0, 10418.0], [72.1, 10439.0], [72.2, 10460.0], [72.3, 10471.0], [72.4, 10486.0], [72.5, 10543.0], [72.6, 10548.0], [72.7, 10574.0], [72.8, 10580.0], [72.9, 10584.0], [73.0, 10588.0], [73.1, 10613.0], [73.2, 10642.0], [73.3, 10696.0], [73.4, 10705.0], [73.5, 10736.0], [73.6, 10754.0], [73.7, 10761.0], [73.8, 10787.0], [73.9, 10796.0], [74.0, 10824.0], [74.1, 10825.0], [74.2, 10857.0], [74.3, 10878.0], [74.4, 10905.0], [74.5, 10950.0], [74.6, 10965.0], [74.7, 11021.0], [74.8, 11038.0], [74.9, 11070.0], [75.0, 11093.0], [75.1, 11115.0], [75.2, 11152.0], [75.3, 11153.0], [75.4, 11241.0], [75.5, 11265.0], [75.6, 11278.0], [75.7, 11341.0], [75.8, 11363.0], [75.9, 11366.0], [76.0, 11377.0], [76.1, 11520.0], [76.2, 11522.0], [76.3, 11531.0], [76.4, 11549.0], [76.5, 11630.0], [76.6, 11647.0], [76.7, 11667.0], [76.8, 11704.0], [76.9, 11803.0], [77.0, 11806.0], [77.1, 11829.0], [77.2, 11848.0], [77.3, 11912.0], [77.4, 11925.0], [77.5, 11996.0], [77.6, 12035.0], [77.7, 12067.0], [77.8, 12122.0], [77.9, 12124.0], [78.0, 12196.0], [78.1, 12204.0], [78.2, 12268.0], [78.3, 12352.0], [78.4, 12353.0], [78.5, 12374.0], [78.6, 12417.0], [78.7, 12448.0], [78.8, 12459.0], [78.9, 12464.0], [79.0, 12522.0], [79.1, 12580.0], [79.2, 12615.0], [79.3, 12630.0], [79.4, 12632.0], [79.5, 12704.0], [79.6, 12769.0], [79.7, 12775.0], [79.8, 12811.0], [79.9, 12813.0], [80.0, 12981.0], [80.1, 12996.0], [80.2, 13052.0], [80.3, 13078.0], [80.4, 13087.0], [80.5, 13104.0], [80.6, 13135.0], [80.7, 13148.0], [80.8, 13173.0], [80.9, 13174.0], [81.0, 13193.0], [81.1, 13210.0], [81.2, 13331.0], [81.3, 13348.0], [81.4, 13415.0], [81.5, 13439.0], [81.6, 13457.0], [81.7, 13575.0], [81.8, 13591.0], [81.9, 13641.0], [82.0, 13675.0], [82.1, 13701.0], [82.2, 13701.0], [82.3, 13777.0], [82.4, 13954.0], [82.5, 13962.0], [82.6, 13994.0], [82.7, 14018.0], [82.8, 14101.0], [82.9, 14135.0], [83.0, 14282.0], [83.1, 14327.0], [83.2, 14489.0], [83.3, 14561.0], [83.4, 14645.0], [83.5, 14688.0], [83.6, 14728.0], [83.7, 14762.0], [83.8, 14835.0], [83.9, 14900.0], [84.0, 14927.0], [84.1, 15047.0], [84.2, 15128.0], [84.3, 15171.0], [84.4, 15178.0], [84.5, 15340.0], [84.6, 15429.0], [84.7, 15484.0], [84.8, 15489.0], [84.9, 15495.0], [85.0, 15511.0], [85.1, 15555.0], [85.2, 15624.0], [85.3, 15654.0], [85.4, 15665.0], [85.5, 15731.0], [85.6, 15736.0], [85.7, 15737.0], [85.8, 15752.0], [85.9, 15770.0], [86.0, 15773.0], [86.1, 15775.0], [86.2, 15880.0], [86.3, 15943.0], [86.4, 16181.0], [86.5, 16193.0], [86.6, 16222.0], [86.7, 16257.0], [86.8, 16312.0], [86.9, 16472.0], [87.0, 16511.0], [87.1, 16595.0], [87.2, 16691.0], [87.3, 16861.0], [87.4, 17029.0], [87.5, 17036.0], [87.6, 17074.0], [87.7, 17157.0], [87.8, 17158.0], [87.9, 17347.0], [88.0, 17471.0], [88.1, 17536.0], [88.2, 17571.0], [88.3, 17734.0], [88.4, 17819.0], [88.5, 17934.0], [88.6, 18307.0], [88.7, 18389.0], [88.8, 18654.0], [88.9, 18723.0], [89.0, 18753.0], [89.1, 18760.0], [89.2, 18899.0], [89.3, 19036.0], [89.4, 19215.0], [89.5, 19288.0], [89.6, 19306.0], [89.7, 19369.0], [89.8, 19550.0], [89.9, 19634.0], [90.0, 19669.0], [90.1, 20169.0], [90.2, 20290.0], [90.3, 20419.0], [90.4, 20437.0], [90.5, 20481.0], [90.6, 20488.0], [90.7, 20601.0], [90.8, 20608.0], [90.9, 20630.0], [91.0, 20740.0], [91.1, 20786.0], [91.2, 20794.0], [91.3, 20927.0], [91.4, 20952.0], [91.5, 21028.0], [91.6, 21104.0], [91.7, 21378.0], [91.8, 21387.0], [91.9, 21705.0], [92.0, 21733.0], [92.1, 21743.0], [92.2, 22233.0], [92.3, 22299.0], [92.4, 22618.0], [92.5, 22746.0], [92.6, 22926.0], [92.7, 22989.0], [92.8, 23005.0], [92.9, 23139.0], [93.0, 23400.0], [93.1, 23982.0], [93.2, 24094.0], [93.3, 24305.0], [93.4, 24555.0], [93.5, 24674.0], [93.6, 24833.0], [93.7, 24931.0], [93.8, 25089.0], [93.9, 25125.0], [94.0, 25196.0], [94.1, 25222.0], [94.2, 25258.0], [94.3, 25537.0], [94.4, 26255.0], [94.5, 26404.0], [94.6, 26813.0], [94.7, 26841.0], [94.8, 26875.0], [94.9, 26898.0], [95.0, 27055.0], [95.1, 27318.0], [95.2, 27905.0], [95.3, 28061.0], [95.4, 28221.0], [95.5, 28555.0], [95.6, 28773.0], [95.7, 28983.0], [95.8, 29628.0], [95.9, 29886.0], [96.0, 29889.0], [96.1, 29943.0], [96.2, 30145.0], [96.3, 30381.0], [96.4, 31045.0], [96.5, 31194.0], [96.6, 31488.0], [96.7, 32047.0], [96.8, 32471.0], [96.9, 32889.0], [97.0, 34499.0], [97.1, 34525.0], [97.2, 35832.0], [97.3, 35842.0], [97.4, 38246.0], [97.5, 38412.0], [97.6, 38412.0], [97.7, 38455.0], [97.8, 38617.0], [97.9, 39545.0], [98.0, 39918.0], [98.1, 41336.0], [98.2, 42198.0], [98.3, 42889.0], [98.4, 44590.0], [98.5, 45632.0], [98.6, 46173.0], [98.7, 49140.0], [98.8, 49882.0], [98.9, 51935.0], [99.0, 52617.0], [99.1, 52870.0], [99.2, 53588.0], [99.3, 57072.0], [99.4, 58910.0], [99.5, 59303.0], [99.6, 244151.0], [99.7, 557491.0], [99.8, 600393.0], [99.9, 602491.0]], "isOverall": false, "label": "GET RSS", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1800.0, "maxY": 17.0, "series": [{"data": [[34500.0, 1.0], [42100.0, 1.0], [41300.0, 1.0], [44500.0, 1.0], [46100.0, 1.0], [58900.0, 1.0], [59300.0, 1.0], [1800.0, 2.0], [1900.0, 4.0], [2000.0, 3.0], [2100.0, 6.0], [2300.0, 9.0], [2200.0, 9.0], [2400.0, 11.0], [2500.0, 10.0], [2600.0, 7.0], [2700.0, 11.0], [2800.0, 4.0], [2900.0, 12.0], [3000.0, 7.0], [3100.0, 17.0], [3300.0, 7.0], [3200.0, 14.0], [3400.0, 12.0], [3500.0, 9.0], [3700.0, 8.0], [3600.0, 15.0], [3800.0, 11.0], [3900.0, 14.0], [4000.0, 15.0], [4100.0, 16.0], [4200.0, 8.0], [4300.0, 7.0], [4500.0, 12.0], [4600.0, 14.0], [4400.0, 7.0], [4700.0, 11.0], [4800.0, 13.0], [5100.0, 7.0], [5000.0, 13.0], [4900.0, 9.0], [5300.0, 15.0], [5200.0, 12.0], [5600.0, 5.0], [5500.0, 7.0], [5400.0, 15.0], [5700.0, 12.0], [5800.0, 8.0], [6000.0, 11.0], [5900.0, 9.0], [6100.0, 7.0], [6300.0, 12.0], [6200.0, 7.0], [6400.0, 4.0], [6500.0, 8.0], [6600.0, 15.0], [6900.0, 11.0], [6800.0, 8.0], [6700.0, 11.0], [7100.0, 9.0], [7000.0, 6.0], [7400.0, 4.0], [7200.0, 9.0], [7300.0, 2.0], [7600.0, 5.0], [7500.0, 4.0], [7900.0, 6.0], [7700.0, 6.0], [7800.0, 5.0], [8100.0, 9.0], [8000.0, 10.0], [8200.0, 5.0], [8600.0, 7.0], [8700.0, 7.0], [8400.0, 6.0], [8500.0, 4.0], [8300.0, 4.0], [8900.0, 9.0], [9000.0, 9.0], [9100.0, 2.0], [9200.0, 9.0], [8800.0, 3.0], [9500.0, 6.0], [9300.0, 12.0], [9400.0, 10.0], [9700.0, 4.0], [9600.0, 5.0], [10200.0, 7.0], [9800.0, 5.0], [10100.0, 5.0], [9900.0, 3.0], [10000.0, 4.0], [10300.0, 4.0], [10600.0, 3.0], [10400.0, 8.0], [10500.0, 6.0], [10700.0, 6.0], [11000.0, 4.0], [10800.0, 4.0], [10900.0, 4.0], [11100.0, 3.0], [11200.0, 3.0], [11500.0, 4.0], [11600.0, 3.0], [11300.0, 4.0], [11700.0, 1.0], [11900.0, 3.0], [12100.0, 3.0], [11800.0, 4.0], [12000.0, 2.0], [12200.0, 2.0], [12600.0, 3.0], [12700.0, 3.0], [12400.0, 4.0], [12300.0, 3.0], [12500.0, 2.0], [12900.0, 2.0], [13300.0, 2.0], [13000.0, 3.0], [12800.0, 2.0], [13100.0, 6.0], [13200.0, 1.0], [13600.0, 2.0], [13700.0, 3.0], [13400.0, 3.0], [13500.0, 2.0], [13900.0, 3.0], [14200.0, 1.0], [14300.0, 1.0], [14100.0, 2.0], [14000.0, 1.0], [14600.0, 2.0], [14700.0, 2.0], [14400.0, 1.0], [14500.0, 1.0], [14800.0, 1.0], [15000.0, 1.0], [14900.0, 2.0], [15300.0, 1.0], [15100.0, 3.0], [15400.0, 4.0], [15700.0, 7.0], [15600.0, 3.0], [15500.0, 2.0], [15800.0, 1.0], [16100.0, 2.0], [16200.0, 2.0], [16300.0, 1.0], [15900.0, 1.0], [17000.0, 3.0], [17400.0, 1.0], [16600.0, 1.0], [16800.0, 1.0], [16400.0, 1.0], [17800.0, 1.0], [18600.0, 1.0], [19200.0, 2.0], [19000.0, 1.0], [18800.0, 1.0], [20400.0, 4.0], [20200.0, 1.0], [19600.0, 2.0], [21000.0, 1.0], [20600.0, 3.0], [22200.0, 2.0], [23400.0, 1.0], [23000.0, 1.0], [22600.0, 1.0], [24000.0, 1.0], [25200.0, 2.0], [24600.0, 1.0], [24800.0, 1.0], [25000.0, 1.0], [26400.0, 1.0], [26200.0, 1.0], [26800.0, 4.0], [27000.0, 1.0], [28200.0, 1.0], [28000.0, 1.0], [29600.0, 1.0], [29800.0, 2.0], [31000.0, 1.0], [31400.0, 1.0], [32000.0, 1.0], [32400.0, 1.0], [34400.0, 1.0], [32800.0, 1.0], [38400.0, 3.0], [42800.0, 1.0], [45600.0, 1.0], [52800.0, 1.0], [600300.0, 1.0], [244100.0, 1.0], [602400.0, 1.0], [39500.0, 1.0], [39900.0, 1.0], [49100.0, 1.0], [51900.0, 1.0], [53500.0, 1.0], [557400.0, 1.0], [17100.0, 2.0], [16500.0, 2.0], [17300.0, 1.0], [17500.0, 2.0], [18300.0, 2.0], [17900.0, 1.0], [17700.0, 1.0], [18700.0, 3.0], [19300.0, 2.0], [19500.0, 1.0], [20100.0, 1.0], [20900.0, 2.0], [21300.0, 2.0], [21100.0, 1.0], [20700.0, 3.0], [21700.0, 3.0], [22900.0, 2.0], [23100.0, 1.0], [22700.0, 1.0], [23900.0, 1.0], [24300.0, 1.0], [24500.0, 1.0], [25100.0, 2.0], [25500.0, 1.0], [24900.0, 1.0], [27300.0, 1.0], [28500.0, 1.0], [27900.0, 1.0], [28900.0, 1.0], [28700.0, 1.0], [29900.0, 1.0], [30300.0, 1.0], [30100.0, 1.0], [31100.0, 1.0], [35800.0, 2.0], [38200.0, 1.0], [38600.0, 1.0], [49800.0, 1.0], [52600.0, 1.0], [57000.0, 1.0]], "isOverall": false, "label": "GET RSS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 602400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 995.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 995.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.58766786E12, "maxY": 55.320346320346346, "series": [{"data": [[1.58766816E12, 19.384615384615387], [1.58766786E12, 16.68518518518518], [1.58766804E12, 55.320346320346346], [1.58766792E12, 31.620853080568722], [1.5876684E12, 4.0], [1.5876681E12, 22.34684684684685], [1.58766858E12, 2.0], [1.58766798E12, 38.277027027027046]], "isOverall": false, "label": "GET RSS", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58766858E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2847.9999999999995, "minX": 1.0, "maxY": 602491.0, "series": [{"data": [[2.0, 557491.0], [3.0, 602491.0], [4.0, 244151.0], [5.0, 11704.0], [6.0, 12704.0], [7.0, 3051.666666666667], [8.0, 3731.25], [9.0, 10085.0], [10.0, 4288.5], [11.0, 4596.571428571429], [12.0, 2847.9999999999995], [13.0, 3428.9999999999995], [14.0, 3562.3939393939386], [15.0, 4097.344827586207], [16.0, 4385.142857142856], [17.0, 4540.0], [18.0, 5516.16], [19.0, 5251.333333333333], [20.0, 4920.1111111111095], [21.0, 6208.470588235294], [22.0, 7437.538461538461], [23.0, 6433.4400000000005], [24.0, 7888.136363636365], [25.0, 7030.206896551724], [26.0, 6660.805555555556], [27.0, 8370.06666666667], [28.0, 6516.333333333334], [29.0, 9739.52380952381], [30.0, 8254.058823529413], [31.0, 10676.0625], [33.0, 12322.363636363636], [32.0, 8739.333333333336], [34.0, 9258.428571428572], [35.0, 9947.772727272726], [37.0, 8952.5], [36.0, 9777.863636363638], [38.0, 14433.125], [39.0, 7576.666666666667], [41.0, 9975.894736842107], [40.0, 14095.066666666668], [43.0, 11427.6], [42.0, 9647.349999999999], [44.0, 13253.666666666666], [45.0, 12298.461538461539], [47.0, 12085.0], [46.0, 11932.0], [48.0, 16650.5], [49.0, 11973.6], [51.0, 9253.0], [50.0, 16305.25], [53.0, 22220.25], [52.0, 10074.0], [55.0, 25752.5], [54.0, 22162.0], [56.0, 9956.0], [57.0, 23322.333333333332], [59.0, 10491.2], [58.0, 24576.5], [61.0, 19052.666666666668], [60.0, 21920.14285714286], [62.0, 23471.75], [63.0, 16364.2], [64.0, 19732.374999999996], [65.0, 19317.357142857145], [66.0, 14108.571428571428], [67.0, 24433.75], [70.0, 21105.857142857145], [71.0, 16928.615384615383], [69.0, 15618.0], [68.0, 10630.875], [72.0, 15165.555555555557], [74.0, 19712.7], [73.0, 19398.2], [75.0, 16307.444444444447], [77.0, 22433.666666666664], [78.0, 35518.333333333336], [76.0, 18326.5], [1.0, 600393.0]], "isOverall": false, "label": "GET RSS", "isController": false}, {"data": [[33.508, 11505.027000000002]], "isOverall": false, "label": "GET RSS-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 78.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.58766786E12, "maxY": 649496.55, "series": [{"data": [[1.58766816E12, 361656.51666666666], [1.58766786E12, 148241.75], [1.58766804E12, 649496.55], [1.58766792E12, 583487.6], [1.5876684E12, 26.95], [1.5876681E12, 626330.8166666667], [1.58766858E12, 129.88333333333333], [1.58766798E12, 411110.38333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58766816E12, 385.6666666666667], [1.58766786E12, 160.2], [1.58766804E12, 685.3], [1.58766792E12, 623.0], [1.5876684E12, 2.966666666666667], [1.5876681E12, 658.6], [1.58766858E12, 0.0], [1.58766798E12, 439.06666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58766858E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4450.277777777778, "minX": 1.58766786E12, "maxY": 586791.6666666666, "series": [{"data": [[1.58766816E12, 5723.961538461537], [1.58766786E12, 4450.277777777778], [1.58766804E12, 16661.71428571427], [1.58766792E12, 9289.933649289098], [1.5876684E12, 244151.0], [1.5876681E12, 5709.774774774772], [1.58766858E12, 586791.6666666666], [1.58766798E12, 9726.141891891893]], "isOverall": false, "label": "GET RSS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58766858E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2840.9629629629635, "minX": 1.58766786E12, "maxY": 244151.0, "series": [{"data": [[1.58766816E12, 4327.653846153847], [1.58766786E12, 2840.9629629629635], [1.58766804E12, 8591.116883116887], [1.58766792E12, 5585.398104265407], [1.5876684E12, 244151.0], [1.5876681E12, 4365.22972972973], [1.58766858E12, 4681.0], [1.58766798E12, 5091.641891891891]], "isOverall": false, "label": "GET RSS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58766858E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 940.7037037037037, "minX": 1.58766786E12, "maxY": 4300.666666666667, "series": [{"data": [[1.58766816E12, 1142.7307692307688], [1.58766786E12, 940.7037037037037], [1.58766804E12, 3575.0909090909086], [1.58766792E12, 2037.09952606635], [1.5876684E12, 4145.0], [1.5876681E12, 1023.0045045045051], [1.58766858E12, 4300.666666666667], [1.58766798E12, 2006.9121621621625]], "isOverall": false, "label": "GET RSS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58766858E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1871.0, "minX": 1.58766786E12, "maxY": 59303.0, "series": [{"data": [[1.58766816E12, 17347.0], [1.58766786E12, 12981.0], [1.58766804E12, 59303.0], [1.58766792E12, 42198.0], [1.5876681E12, 19634.0], [1.58766798E12, 38246.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58766816E12, 2084.0], [1.58766786E12, 1871.0], [1.58766804E12, 4643.0], [1.58766792E12, 2512.0], [1.5876681E12, 2191.0], [1.58766798E12, 2782.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58766816E12, 10381.100000000002], [1.58766786E12, 7619.5], [1.58766804E12, 34114.200000000026], [1.58766792E12, 17035.3], [1.5876681E12, 9580.000000000002], [1.58766798E12, 20528.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58766816E12, 17009.1], [1.58766786E12, 12981.0], [1.58766804E12, 58321.84000000001], [1.58766792E12, 34135.44999999995], [1.5876681E12, 18944.440000000017], [1.58766798E12, 35621.06999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58766816E12, 12915.049999999994], [1.58766786E12, 9686.0], [1.58766804E12, 45006.799999999974], [1.58766792E12, 20763.649999999998], [1.5876681E12, 12511.599999999997], [1.58766798E12, 26984.35]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58766816E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5164.5, "minX": 1.0, "maxY": 600393.0, "series": [{"data": [[2.0, 6397.5], [4.0, 5164.5], [1.0, 7304.0], [8.0, 8435.5], [9.0, 12996.0], [5.0, 7752.0], [10.0, 13928.5], [11.0, 8320.0], [3.0, 6032.0], [6.0, 7475.5], [7.0, 8498.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 132589.5], [3.0, 600393.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 122075.5, "series": [{"data": [[2.0, 4539.0], [4.0, 3786.5], [1.0, 4382.0], [8.0, 6486.5], [9.0, 6659.0], [5.0, 5168.5], [10.0, 7845.5], [11.0, 6889.0], [3.0, 4282.0], [6.0, 5256.5], [7.0, 6008.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 122075.5], [3.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 11.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.3166666666666667, "minX": 1.58766786E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.58766816E12, 2.0166666666666666], [1.58766786E12, 1.3166666666666667], [1.58766804E12, 3.3333333333333335], [1.58766792E12, 3.3333333333333335], [1.5876681E12, 3.3333333333333335], [1.58766798E12, 3.3333333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58766816E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.58766786E12, "maxY": 3.85, "series": [{"data": [[1.58766816E12, 2.1666666666666665], [1.58766786E12, 0.9], [1.58766804E12, 3.85], [1.58766792E12, 3.5], [1.5876681E12, 3.7], [1.58766798E12, 2.466666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58766792E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.5876684E12, 0.016666666666666666]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.58766858E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58766858E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.58766786E12, "maxY": 3.85, "series": [{"data": [[1.58766816E12, 2.1666666666666665], [1.58766786E12, 0.9], [1.58766804E12, 3.85], [1.58766792E12, 3.5], [1.5876681E12, 3.7], [1.58766798E12, 2.466666666666667]], "isOverall": false, "label": "GET RSS-success", "isController": false}, {"data": [[1.58766792E12, 0.016666666666666666], [1.5876684E12, 0.016666666666666666], [1.58766858E12, 0.05]], "isOverall": false, "label": "GET RSS-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58766858E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.58766786E12, "maxY": 3.85, "series": [{"data": [[1.58766816E12, 2.1666666666666665], [1.58766786E12, 0.9], [1.58766804E12, 3.85], [1.58766792E12, 3.5], [1.5876681E12, 3.7], [1.58766798E12, 2.466666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58766792E12, 0.016666666666666666], [1.5876684E12, 0.016666666666666666], [1.58766858E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58766858E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

