/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 17492.0, "minX": 0.0, "maxY": 983138.0, "series": [{"data": [[0.0, 17492.0], [0.1, 17492.0], [0.2, 17594.0], [0.3, 17594.0], [0.4, 17929.0], [0.5, 17929.0], [0.6, 17929.0], [0.7, 18415.0], [0.8, 19090.0], [0.9, 19090.0], [1.0, 21378.0], [1.1, 21378.0], [1.2, 21735.0], [1.3, 21735.0], [1.4, 22093.0], [1.5, 22093.0], [1.6, 22504.0], [1.7, 22504.0], [1.8, 22717.0], [1.9, 22717.0], [2.0, 22762.0], [2.1, 22762.0], [2.2, 22806.0], [2.3, 22806.0], [2.4, 22870.0], [2.5, 22870.0], [2.6, 23089.0], [2.7, 23089.0], [2.8, 23089.0], [2.9, 23208.0], [3.0, 23208.0], [3.1, 23397.0], [3.2, 23397.0], [3.3, 23873.0], [3.4, 23873.0], [3.5, 24307.0], [3.6, 24307.0], [3.7, 25074.0], [3.8, 25074.0], [3.9, 25363.0], [4.0, 25363.0], [4.1, 25444.0], [4.2, 25444.0], [4.3, 25661.0], [4.4, 25661.0], [4.5, 25669.0], [4.6, 25669.0], [4.7, 25891.0], [4.8, 25891.0], [4.9, 26257.0], [5.0, 26257.0], [5.1, 26530.0], [5.2, 26530.0], [5.3, 26741.0], [5.4, 26741.0], [5.5, 26790.0], [5.6, 26790.0], [5.7, 27615.0], [5.8, 27615.0], [5.9, 28007.0], [6.0, 28007.0], [6.1, 28102.0], [6.2, 28102.0], [6.3, 28515.0], [6.4, 28515.0], [6.5, 28552.0], [6.6, 28552.0], [6.7, 29447.0], [6.8, 29447.0], [6.9, 29488.0], [7.0, 29488.0], [7.1, 29550.0], [7.2, 29550.0], [7.3, 29550.0], [7.4, 29550.0], [7.5, 30241.0], [7.6, 30241.0], [7.7, 30341.0], [7.8, 30341.0], [7.9, 30951.0], [8.0, 30951.0], [8.1, 31280.0], [8.2, 31280.0], [8.3, 31449.0], [8.4, 31449.0], [8.5, 31478.0], [8.6, 31478.0], [8.7, 31616.0], [8.8, 32191.0], [8.9, 32191.0], [9.0, 32356.0], [9.1, 32356.0], [9.2, 32379.0], [9.3, 32379.0], [9.4, 32549.0], [9.5, 32549.0], [9.6, 32815.0], [9.7, 32815.0], [9.8, 32820.0], [9.9, 32820.0], [10.0, 33203.0], [10.1, 33203.0], [10.2, 33329.0], [10.3, 33329.0], [10.4, 33739.0], [10.5, 33739.0], [10.6, 33759.0], [10.7, 33759.0], [10.8, 33918.0], [10.9, 33918.0], [11.0, 34017.0], [11.1, 34017.0], [11.2, 34035.0], [11.3, 34035.0], [11.4, 34656.0], [11.5, 34656.0], [11.6, 34850.0], [11.7, 34850.0], [11.8, 35036.0], [11.9, 35036.0], [12.0, 35078.0], [12.1, 35078.0], [12.2, 35335.0], [12.3, 35335.0], [12.4, 35894.0], [12.5, 35894.0], [12.6, 36063.0], [12.7, 36063.0], [12.8, 36130.0], [12.9, 36130.0], [13.0, 36771.0], [13.1, 36771.0], [13.2, 36816.0], [13.3, 36816.0], [13.4, 37765.0], [13.5, 37765.0], [13.6, 38343.0], [13.7, 38343.0], [13.8, 38351.0], [13.9, 38351.0], [14.0, 38693.0], [14.1, 38693.0], [14.2, 38796.0], [14.3, 38796.0], [14.4, 39391.0], [14.5, 39391.0], [14.6, 39509.0], [14.7, 39509.0], [14.8, 39730.0], [14.9, 39730.0], [15.0, 39867.0], [15.1, 39867.0], [15.2, 40420.0], [15.3, 40420.0], [15.4, 40609.0], [15.5, 40609.0], [15.6, 40996.0], [15.7, 40996.0], [15.8, 41046.0], [15.9, 41046.0], [16.0, 41119.0], [16.1, 41119.0], [16.2, 41539.0], [16.3, 41539.0], [16.4, 41731.0], [16.5, 41731.0], [16.6, 41863.0], [16.7, 41863.0], [16.8, 41922.0], [16.9, 41922.0], [17.0, 42506.0], [17.1, 42506.0], [17.2, 42520.0], [17.3, 42520.0], [17.4, 42864.0], [17.5, 42864.0], [17.6, 42867.0], [17.7, 42867.0], [17.8, 43037.0], [17.9, 43037.0], [18.0, 43628.0], [18.1, 43628.0], [18.2, 44174.0], [18.3, 44174.0], [18.4, 44679.0], [18.5, 44679.0], [18.6, 44855.0], [18.7, 44855.0], [18.8, 45022.0], [18.9, 45022.0], [19.0, 45061.0], [19.1, 45061.0], [19.2, 45101.0], [19.3, 45101.0], [19.4, 45444.0], [19.5, 45444.0], [19.6, 45669.0], [19.7, 45669.0], [19.8, 45719.0], [19.9, 45719.0], [20.0, 45958.0], [20.1, 45958.0], [20.2, 46159.0], [20.3, 46159.0], [20.4, 46182.0], [20.5, 46182.0], [20.6, 46250.0], [20.7, 46250.0], [20.8, 46615.0], [20.9, 46615.0], [21.0, 46658.0], [21.1, 46658.0], [21.2, 47534.0], [21.3, 47534.0], [21.4, 47746.0], [21.5, 47746.0], [21.6, 48101.0], [21.7, 48101.0], [21.8, 48776.0], [21.9, 48776.0], [22.0, 48912.0], [22.1, 48912.0], [22.2, 49021.0], [22.3, 49021.0], [22.4, 49236.0], [22.5, 49236.0], [22.6, 49460.0], [22.7, 49460.0], [22.8, 49613.0], [22.9, 49613.0], [23.0, 50493.0], [23.1, 50493.0], [23.2, 50598.0], [23.3, 50598.0], [23.4, 50727.0], [23.5, 50727.0], [23.6, 50846.0], [23.7, 50846.0], [23.8, 51133.0], [23.9, 51133.0], [24.0, 51240.0], [24.1, 51240.0], [24.2, 51267.0], [24.3, 51267.0], [24.4, 51444.0], [24.5, 51444.0], [24.6, 51808.0], [24.7, 51808.0], [24.8, 51927.0], [24.9, 51927.0], [25.0, 52071.0], [25.1, 52071.0], [25.2, 52483.0], [25.3, 52483.0], [25.4, 52911.0], [25.5, 52911.0], [25.6, 53535.0], [25.7, 53535.0], [25.8, 53568.0], [25.9, 53568.0], [26.0, 53590.0], [26.1, 53590.0], [26.2, 53619.0], [26.3, 53619.0], [26.4, 53621.0], [26.5, 53621.0], [26.6, 53693.0], [26.7, 53693.0], [26.8, 53907.0], [26.9, 53907.0], [27.0, 54126.0], [27.1, 54126.0], [27.2, 54317.0], [27.3, 54317.0], [27.4, 54506.0], [27.5, 54506.0], [27.6, 54869.0], [27.7, 54869.0], [27.8, 55541.0], [27.9, 55541.0], [28.0, 55561.0], [28.1, 55561.0], [28.2, 55771.0], [28.3, 55771.0], [28.4, 55965.0], [28.5, 55965.0], [28.6, 56059.0], [28.7, 56059.0], [28.8, 56539.0], [28.9, 56539.0], [29.0, 56667.0], [29.1, 56667.0], [29.2, 56764.0], [29.3, 56764.0], [29.4, 56872.0], [29.5, 56872.0], [29.6, 57105.0], [29.7, 57105.0], [29.8, 57111.0], [29.9, 57111.0], [30.0, 57495.0], [30.1, 57495.0], [30.2, 57642.0], [30.3, 57642.0], [30.4, 57826.0], [30.5, 57826.0], [30.6, 58454.0], [30.7, 58454.0], [30.8, 58689.0], [30.9, 58689.0], [31.0, 58758.0], [31.1, 58758.0], [31.2, 59004.0], [31.3, 59004.0], [31.4, 59077.0], [31.5, 59077.0], [31.6, 61486.0], [31.7, 61486.0], [31.8, 61787.0], [31.9, 61787.0], [32.0, 62883.0], [32.1, 62883.0], [32.2, 63066.0], [32.3, 63066.0], [32.4, 64158.0], [32.5, 64158.0], [32.6, 64326.0], [32.7, 64326.0], [32.8, 64468.0], [32.9, 64468.0], [33.0, 65387.0], [33.1, 65387.0], [33.2, 65402.0], [33.3, 65402.0], [33.4, 65649.0], [33.5, 65649.0], [33.6, 66231.0], [33.7, 66231.0], [33.8, 66325.0], [33.9, 66325.0], [34.0, 66381.0], [34.1, 66381.0], [34.2, 66619.0], [34.3, 66619.0], [34.4, 66702.0], [34.5, 66702.0], [34.6, 66786.0], [34.7, 66786.0], [34.8, 67094.0], [34.9, 67094.0], [35.0, 67585.0], [35.1, 67585.0], [35.2, 67833.0], [35.3, 67833.0], [35.4, 67977.0], [35.5, 67977.0], [35.6, 68467.0], [35.7, 68467.0], [35.8, 68541.0], [35.9, 68541.0], [36.0, 68625.0], [36.1, 68625.0], [36.2, 68851.0], [36.3, 68851.0], [36.4, 69039.0], [36.5, 69039.0], [36.6, 69084.0], [36.7, 69084.0], [36.8, 69120.0], [36.9, 69120.0], [37.0, 69250.0], [37.1, 69250.0], [37.2, 69337.0], [37.3, 69337.0], [37.4, 69614.0], [37.5, 69614.0], [37.6, 69820.0], [37.7, 69820.0], [37.8, 69902.0], [37.9, 69902.0], [38.0, 70313.0], [38.1, 70313.0], [38.2, 70470.0], [38.3, 70470.0], [38.4, 70470.0], [38.5, 70670.0], [38.6, 70670.0], [38.7, 70906.0], [38.8, 70906.0], [38.9, 71216.0], [39.0, 71216.0], [39.1, 71451.0], [39.2, 71451.0], [39.3, 71640.0], [39.4, 71640.0], [39.5, 71901.0], [39.6, 71901.0], [39.7, 71962.0], [39.8, 71962.0], [39.9, 72060.0], [40.0, 72060.0], [40.1, 73065.0], [40.2, 73065.0], [40.3, 73315.0], [40.4, 73315.0], [40.5, 73756.0], [40.6, 73756.0], [40.7, 73771.0], [40.8, 73771.0], [40.9, 74659.0], [41.0, 74659.0], [41.1, 75333.0], [41.2, 75333.0], [41.3, 75535.0], [41.4, 75535.0], [41.5, 75569.0], [41.6, 75569.0], [41.7, 75736.0], [41.8, 75736.0], [41.9, 75824.0], [42.0, 75824.0], [42.1, 76033.0], [42.2, 76033.0], [42.3, 76249.0], [42.4, 76249.0], [42.5, 76366.0], [42.6, 76366.0], [42.7, 76439.0], [42.8, 76439.0], [42.9, 76445.0], [43.0, 76445.0], [43.1, 76634.0], [43.2, 76634.0], [43.3, 76825.0], [43.4, 76825.0], [43.5, 76866.0], [43.6, 76866.0], [43.7, 77056.0], [43.8, 77056.0], [43.9, 77124.0], [44.0, 77124.0], [44.1, 77138.0], [44.2, 77138.0], [44.3, 77303.0], [44.4, 77303.0], [44.5, 77827.0], [44.6, 77827.0], [44.7, 78706.0], [44.8, 78706.0], [44.9, 79265.0], [45.0, 79265.0], [45.1, 79884.0], [45.2, 79884.0], [45.3, 79911.0], [45.4, 79911.0], [45.5, 79937.0], [45.6, 79937.0], [45.7, 80069.0], [45.8, 80069.0], [45.9, 80256.0], [46.0, 80256.0], [46.1, 80393.0], [46.2, 80393.0], [46.3, 81021.0], [46.4, 81021.0], [46.5, 81206.0], [46.6, 81206.0], [46.7, 82235.0], [46.8, 82235.0], [46.9, 82673.0], [47.0, 82673.0], [47.1, 83381.0], [47.2, 83381.0], [47.3, 83481.0], [47.4, 83481.0], [47.5, 83534.0], [47.6, 83534.0], [47.7, 83904.0], [47.8, 83904.0], [47.9, 84002.0], [48.0, 84002.0], [48.1, 84209.0], [48.2, 84209.0], [48.3, 84341.0], [48.4, 84341.0], [48.5, 84485.0], [48.6, 84485.0], [48.7, 84756.0], [48.8, 84756.0], [48.9, 84891.0], [49.0, 84891.0], [49.1, 84965.0], [49.2, 84965.0], [49.3, 85100.0], [49.4, 85100.0], [49.5, 85365.0], [49.6, 85365.0], [49.7, 85576.0], [49.8, 85576.0], [49.9, 85689.0], [50.0, 85689.0], [50.1, 86150.0], [50.2, 86150.0], [50.3, 86152.0], [50.4, 86152.0], [50.5, 86445.0], [50.6, 86445.0], [50.7, 86541.0], [50.8, 86541.0], [50.9, 86634.0], [51.0, 86634.0], [51.1, 86716.0], [51.2, 86716.0], [51.3, 87044.0], [51.4, 87044.0], [51.5, 87151.0], [51.6, 87151.0], [51.7, 87189.0], [51.8, 87189.0], [51.9, 87396.0], [52.0, 87396.0], [52.1, 87402.0], [52.2, 87402.0], [52.3, 87957.0], [52.4, 87957.0], [52.5, 88066.0], [52.6, 88066.0], [52.7, 88549.0], [52.8, 88549.0], [52.9, 88599.0], [53.0, 88599.0], [53.1, 88611.0], [53.2, 88611.0], [53.3, 88968.0], [53.4, 88968.0], [53.5, 89221.0], [53.6, 89221.0], [53.7, 89402.0], [53.8, 89402.0], [53.9, 89403.0], [54.0, 89403.0], [54.1, 89665.0], [54.2, 89665.0], [54.3, 90709.0], [54.4, 90709.0], [54.5, 90863.0], [54.6, 90863.0], [54.7, 90906.0], [54.8, 90906.0], [54.9, 91106.0], [55.0, 91106.0], [55.1, 91153.0], [55.2, 91153.0], [55.3, 91245.0], [55.4, 91245.0], [55.5, 91348.0], [55.6, 91348.0], [55.7, 91619.0], [55.8, 91619.0], [55.9, 91730.0], [56.0, 91730.0], [56.1, 92109.0], [56.2, 92109.0], [56.3, 92485.0], [56.4, 92485.0], [56.5, 92670.0], [56.6, 92670.0], [56.7, 93119.0], [56.8, 93119.0], [56.9, 93352.0], [57.0, 93352.0], [57.1, 93791.0], [57.2, 93791.0], [57.3, 93859.0], [57.4, 93859.0], [57.5, 94021.0], [57.6, 94021.0], [57.7, 94691.0], [57.8, 94691.0], [57.9, 95120.0], [58.0, 95120.0], [58.1, 97337.0], [58.2, 97337.0], [58.3, 99103.0], [58.4, 99103.0], [58.5, 99322.0], [58.6, 99322.0], [58.7, 99338.0], [58.8, 99338.0], [58.9, 99369.0], [59.0, 99369.0], [59.1, 99877.0], [59.2, 99877.0], [59.3, 100644.0], [59.4, 100644.0], [59.5, 100835.0], [59.6, 100835.0], [59.7, 101715.0], [59.8, 101715.0], [59.9, 101779.0], [60.0, 101779.0], [60.1, 102026.0], [60.2, 102026.0], [60.3, 102120.0], [60.4, 102120.0], [60.5, 102159.0], [60.6, 102159.0], [60.7, 102241.0], [60.8, 102241.0], [60.9, 102249.0], [61.0, 102249.0], [61.1, 102276.0], [61.2, 102276.0], [61.3, 102958.0], [61.4, 102958.0], [61.5, 103378.0], [61.6, 103378.0], [61.7, 103683.0], [61.8, 103683.0], [61.9, 103950.0], [62.0, 103950.0], [62.1, 104614.0], [62.2, 104614.0], [62.3, 104864.0], [62.4, 104864.0], [62.5, 105059.0], [62.6, 105059.0], [62.7, 105262.0], [62.8, 105262.0], [62.9, 105732.0], [63.0, 105732.0], [63.1, 105789.0], [63.2, 105789.0], [63.3, 106166.0], [63.4, 106166.0], [63.5, 106281.0], [63.6, 106281.0], [63.7, 106484.0], [63.8, 106484.0], [63.9, 106536.0], [64.0, 106536.0], [64.1, 106770.0], [64.2, 106770.0], [64.3, 106826.0], [64.4, 106826.0], [64.5, 106851.0], [64.6, 106851.0], [64.7, 107424.0], [64.8, 107424.0], [64.9, 107773.0], [65.0, 107773.0], [65.1, 107928.0], [65.2, 107928.0], [65.3, 108565.0], [65.4, 108565.0], [65.5, 109297.0], [65.6, 109297.0], [65.7, 109330.0], [65.8, 109330.0], [65.9, 109377.0], [66.0, 109377.0], [66.1, 110181.0], [66.2, 110181.0], [66.3, 110244.0], [66.4, 110244.0], [66.5, 110265.0], [66.6, 110265.0], [66.7, 110269.0], [66.8, 110269.0], [66.9, 111056.0], [67.0, 111056.0], [67.1, 111132.0], [67.2, 111132.0], [67.3, 111230.0], [67.4, 111230.0], [67.5, 111419.0], [67.6, 111419.0], [67.7, 112208.0], [67.8, 112208.0], [67.9, 112426.0], [68.0, 112426.0], [68.1, 112536.0], [68.2, 112536.0], [68.3, 113032.0], [68.4, 113032.0], [68.5, 113122.0], [68.6, 113122.0], [68.7, 113163.0], [68.8, 113163.0], [68.9, 113403.0], [69.0, 113403.0], [69.1, 113817.0], [69.2, 113817.0], [69.3, 114136.0], [69.4, 114136.0], [69.5, 114137.0], [69.6, 114137.0], [69.7, 114189.0], [69.8, 114189.0], [69.9, 114229.0], [70.0, 114229.0], [70.1, 114509.0], [70.2, 114509.0], [70.3, 114810.0], [70.4, 114810.0], [70.5, 114870.0], [70.6, 114870.0], [70.7, 115110.0], [70.8, 115110.0], [70.9, 115654.0], [71.0, 115654.0], [71.1, 115797.0], [71.2, 115797.0], [71.3, 115933.0], [71.4, 115933.0], [71.5, 116124.0], [71.6, 116124.0], [71.7, 116424.0], [71.8, 116424.0], [71.9, 116864.0], [72.0, 116864.0], [72.1, 117094.0], [72.2, 117094.0], [72.3, 117832.0], [72.4, 117832.0], [72.5, 118029.0], [72.6, 118029.0], [72.7, 118203.0], [72.8, 118203.0], [72.9, 118265.0], [73.0, 118265.0], [73.1, 118438.0], [73.2, 118438.0], [73.3, 119291.0], [73.4, 119291.0], [73.5, 119503.0], [73.6, 119503.0], [73.7, 119768.0], [73.8, 119768.0], [73.9, 119834.0], [74.0, 119834.0], [74.1, 120026.0], [74.2, 120026.0], [74.3, 120116.0], [74.4, 120116.0], [74.5, 120178.0], [74.6, 120178.0], [74.7, 120492.0], [74.8, 120492.0], [74.9, 120565.0], [75.0, 120565.0], [75.1, 121105.0], [75.2, 121105.0], [75.3, 121273.0], [75.4, 121273.0], [75.5, 121494.0], [75.6, 121494.0], [75.7, 122724.0], [75.8, 122724.0], [75.9, 122815.0], [76.0, 122815.0], [76.1, 123475.0], [76.2, 123475.0], [76.3, 124038.0], [76.4, 124038.0], [76.5, 124301.0], [76.6, 124301.0], [76.7, 124477.0], [76.8, 124477.0], [76.9, 124622.0], [77.0, 124622.0], [77.1, 124935.0], [77.2, 124935.0], [77.3, 125012.0], [77.4, 125012.0], [77.5, 125393.0], [77.6, 125393.0], [77.7, 125399.0], [77.8, 125399.0], [77.9, 125508.0], [78.0, 125508.0], [78.1, 125698.0], [78.2, 125698.0], [78.3, 125776.0], [78.4, 125776.0], [78.5, 126041.0], [78.6, 126041.0], [78.7, 126393.0], [78.8, 126393.0], [78.9, 126623.0], [79.0, 126623.0], [79.1, 126803.0], [79.2, 126803.0], [79.3, 126842.0], [79.4, 126842.0], [79.5, 127464.0], [79.6, 127464.0], [79.7, 127616.0], [79.8, 127616.0], [79.9, 127900.0], [80.0, 127900.0], [80.1, 128083.0], [80.2, 128083.0], [80.3, 128184.0], [80.4, 128184.0], [80.5, 128354.0], [80.6, 128354.0], [80.7, 128424.0], [80.8, 128424.0], [80.9, 128576.0], [81.0, 128576.0], [81.1, 128837.0], [81.2, 128837.0], [81.3, 129397.0], [81.4, 129397.0], [81.5, 129692.0], [81.6, 129692.0], [81.7, 129747.0], [81.8, 129747.0], [81.9, 130640.0], [82.0, 130640.0], [82.1, 130815.0], [82.2, 130815.0], [82.3, 130857.0], [82.4, 130857.0], [82.5, 130879.0], [82.6, 130879.0], [82.7, 131105.0], [82.8, 131105.0], [82.9, 131371.0], [83.0, 131371.0], [83.1, 131372.0], [83.2, 131372.0], [83.3, 131663.0], [83.4, 131663.0], [83.5, 131878.0], [83.6, 131878.0], [83.7, 132141.0], [83.8, 132141.0], [83.9, 132364.0], [84.0, 132364.0], [84.1, 133453.0], [84.2, 133453.0], [84.3, 133553.0], [84.4, 133553.0], [84.5, 133805.0], [84.6, 133805.0], [84.7, 134169.0], [84.8, 134169.0], [84.9, 134204.0], [85.0, 134204.0], [85.1, 134268.0], [85.2, 134268.0], [85.3, 134504.0], [85.4, 134504.0], [85.5, 134672.0], [85.6, 134672.0], [85.7, 135261.0], [85.8, 135261.0], [85.9, 135390.0], [86.0, 135390.0], [86.1, 135436.0], [86.2, 135436.0], [86.3, 135671.0], [86.4, 135671.0], [86.5, 135769.0], [86.6, 135769.0], [86.7, 135789.0], [86.8, 135789.0], [86.9, 135838.0], [87.0, 135838.0], [87.1, 136010.0], [87.2, 136010.0], [87.3, 136048.0], [87.4, 136048.0], [87.5, 136332.0], [87.6, 136332.0], [87.7, 136361.0], [87.8, 136361.0], [87.9, 136378.0], [88.0, 136378.0], [88.1, 136825.0], [88.2, 136825.0], [88.3, 136919.0], [88.4, 136919.0], [88.5, 137616.0], [88.6, 137616.0], [88.7, 138592.0], [88.8, 138592.0], [88.9, 138795.0], [89.0, 138795.0], [89.1, 138860.0], [89.2, 138860.0], [89.3, 139361.0], [89.4, 139361.0], [89.5, 139663.0], [89.6, 139663.0], [89.7, 139748.0], [89.8, 139748.0], [89.9, 139849.0], [90.0, 139849.0], [90.1, 140208.0], [90.2, 140208.0], [90.3, 140237.0], [90.4, 140237.0], [90.5, 140806.0], [90.6, 140806.0], [90.7, 141204.0], [90.8, 141204.0], [90.9, 141224.0], [91.0, 141224.0], [91.1, 141292.0], [91.2, 141292.0], [91.3, 141322.0], [91.4, 141322.0], [91.5, 141501.0], [91.6, 141501.0], [91.7, 141824.0], [91.8, 141824.0], [91.9, 142137.0], [92.0, 142137.0], [92.1, 142546.0], [92.2, 142546.0], [92.3, 143002.0], [92.4, 143002.0], [92.5, 143283.0], [92.6, 143283.0], [92.7, 143495.0], [92.8, 143495.0], [92.9, 143690.0], [93.0, 143690.0], [93.1, 143865.0], [93.2, 143865.0], [93.3, 143972.0], [93.4, 143972.0], [93.5, 144080.0], [93.6, 144080.0], [93.7, 144160.0], [93.8, 144160.0], [93.9, 144314.0], [94.0, 144314.0], [94.1, 144422.0], [94.2, 144422.0], [94.3, 144612.0], [94.4, 144612.0], [94.5, 144660.0], [94.6, 144660.0], [94.7, 144767.0], [94.8, 144767.0], [94.9, 145015.0], [95.0, 145015.0], [95.1, 145056.0], [95.2, 145056.0], [95.3, 145111.0], [95.4, 145111.0], [95.5, 145884.0], [95.6, 145884.0], [95.7, 146019.0], [95.8, 146019.0], [95.9, 146314.0], [96.0, 146314.0], [96.1, 146365.0], [96.2, 146365.0], [96.3, 146488.0], [96.4, 146488.0], [96.5, 146570.0], [96.6, 146570.0], [96.7, 146900.0], [96.8, 146900.0], [96.9, 147096.0], [97.0, 147096.0], [97.1, 147370.0], [97.2, 147370.0], [97.3, 147500.0], [97.4, 147500.0], [97.5, 242796.0], [97.6, 242796.0], [97.7, 779732.0], [97.8, 779732.0], [97.9, 780333.0], [98.0, 780333.0], [98.1, 794136.0], [98.2, 794136.0], [98.3, 805531.0], [98.4, 805531.0], [98.5, 822318.0], [98.6, 822318.0], [98.7, 854728.0], [98.8, 854728.0], [98.9, 906928.0], [99.0, 906928.0], [99.1, 959142.0], [99.2, 959142.0], [99.3, 959732.0], [99.4, 959732.0], [99.5, 970546.0], [99.6, 970546.0], [99.7, 982529.0], [99.8, 982529.0], [99.9, 983138.0], [100.0, 983138.0]], "isOverall": false, "label": "GET RSS", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 17400.0, "maxY": 3.0, "series": [{"data": [[135200.0, 1.0], [906900.0, 1.0], [139300.0, 1.0], [142500.0, 1.0], [66700.0, 2.0], [69900.0, 1.0], [76300.0, 1.0], [84300.0, 1.0], [90700.0, 1.0], [106700.0, 1.0], [113100.0, 2.0], [119500.0, 1.0], [121100.0, 1.0], [122700.0, 1.0], [124300.0, 1.0], [133800.0, 1.0], [140200.0, 2.0], [143400.0, 1.0], [33700.0, 2.0], [36100.0, 1.0], [35300.0, 1.0], [144300.0, 1.0], [37700.0, 1.0], [147500.0, 1.0], [40900.0, 1.0], [39300.0, 1.0], [42500.0, 2.0], [41700.0, 1.0], [44100.0, 1.0], [45700.0, 1.0], [48100.0, 1.0], [48900.0, 1.0], [50500.0, 1.0], [52900.0, 1.0], [54500.0, 1.0], [61700.0, 1.0], [64100.0, 1.0], [69000.0, 2.0], [70600.0, 1.0], [77000.0, 1.0], [854700.0, 1.0], [80200.0, 1.0], [83400.0, 1.0], [86600.0, 1.0], [94600.0, 1.0], [107400.0, 1.0], [112200.0, 1.0], [113800.0, 1.0], [117000.0, 1.0], [125000.0, 1.0], [123400.0, 1.0], [126600.0, 1.0], [138800.0, 1.0], [135600.0, 1.0], [959700.0, 1.0], [139700.0, 1.0], [87300.0, 1.0], [88900.0, 1.0], [92100.0, 1.0], [93700.0, 1.0], [101700.0, 2.0], [103300.0, 1.0], [106500.0, 1.0], [114500.0, 1.0], [116100.0, 1.0], [125700.0, 1.0], [134200.0, 2.0], [143800.0, 1.0], [147000.0, 1.0], [18400.0, 1.0], [22000.0, 1.0], [23200.0, 1.0], [22800.0, 2.0], [25600.0, 2.0], [27600.0, 1.0], [28000.0, 1.0], [31600.0, 1.0], [31200.0, 1.0], [32800.0, 2.0], [36800.0, 1.0], [36000.0, 1.0], [141500.0, 1.0], [144700.0, 1.0], [44800.0, 1.0], [45600.0, 1.0], [50400.0, 1.0], [49600.0, 1.0], [51200.0, 2.0], [52000.0, 1.0], [53600.0, 3.0], [56800.0, 1.0], [56000.0, 1.0], [57600.0, 1.0], [58400.0, 1.0], [65600.0, 1.0], [68800.0, 1.0], [70400.0, 1.0], [72000.0, 1.0], [76800.0, 2.0], [80000.0, 1.0], [84800.0, 1.0], [86400.0, 1.0], [88000.0, 1.0], [89600.0, 1.0], [91200.0, 1.0], [100800.0, 1.0], [118400.0, 1.0], [116800.0, 1.0], [120000.0, 1.0], [128000.0, 1.0], [129600.0, 1.0], [137600.0, 1.0], [140800.0, 1.0], [144000.0, 1.0], [822300.0, 1.0], [132100.0, 1.0], [135300.0, 1.0], [138500.0, 1.0], [71900.0, 2.0], [70300.0, 1.0], [79900.0, 2.0], [84700.0, 1.0], [87900.0, 1.0], [91100.0, 2.0], [99100.0, 1.0], [103900.0, 1.0], [115100.0, 1.0], [126300.0, 1.0], [127900.0, 1.0], [780300.0, 1.0], [145800.0, 1.0], [983100.0, 1.0], [33900.0, 1.0], [38700.0, 1.0], [39500.0, 1.0], [41900.0, 1.0], [41100.0, 1.0], [45100.0, 1.0], [45900.0, 1.0], [47500.0, 1.0], [50700.0, 1.0], [53900.0, 1.0], [55500.0, 2.0], [57100.0, 2.0], [58700.0, 1.0], [242700.0, 1.0], [64300.0, 1.0], [67800.0, 1.0], [66200.0, 1.0], [75800.0, 1.0], [82200.0, 1.0], [87000.0, 1.0], [88600.0, 1.0], [99800.0, 1.0], [104600.0, 1.0], [106200.0, 1.0], [111000.0, 1.0], [114200.0, 1.0], [131600.0, 1.0], [141200.0, 3.0], [144400.0, 1.0], [135700.0, 2.0], [142100.0, 1.0], [68500.0, 1.0], [73300.0, 1.0], [86100.0, 2.0], [90900.0, 1.0], [97300.0, 1.0], [102100.0, 2.0], [108500.0, 1.0], [110100.0, 1.0], [119700.0, 1.0], [129300.0, 1.0], [133400.0, 1.0], [139800.0, 1.0], [143000.0, 1.0], [805500.0, 1.0], [21300.0, 1.0], [21700.0, 1.0], [22500.0, 1.0], [959100.0, 1.0], [23300.0, 1.0], [25300.0, 1.0], [26500.0, 1.0], [28100.0, 1.0], [28500.0, 2.0], [30900.0, 1.0], [32100.0, 1.0], [32500.0, 1.0], [34600.0, 1.0], [131100.0, 1.0], [143900.0, 1.0], [38600.0, 1.0], [41000.0, 1.0], [41800.0, 1.0], [45000.0, 2.0], [46600.0, 2.0], [49000.0, 1.0], [51400.0, 1.0], [58600.0, 1.0], [57800.0, 1.0], [69200.0, 1.0], [91600.0, 1.0], [109200.0, 1.0], [112400.0, 1.0], [115600.0, 1.0], [120400.0, 1.0], [126800.0, 2.0], [128400.0, 1.0], [136800.0, 1.0], [143200.0, 1.0], [146400.0, 1.0], [131300.0, 2.0], [134500.0, 1.0], [144100.0, 1.0], [147300.0, 1.0], [67500.0, 1.0], [69100.0, 1.0], [77100.0, 2.0], [75500.0, 2.0], [80300.0, 1.0], [78700.0, 1.0], [83500.0, 1.0], [85100.0, 1.0], [86700.0, 1.0], [93100.0, 1.0], [128300.0, 1.0], [135400.0, 1.0], [141800.0, 1.0], [145000.0, 2.0], [779700.0, 1.0], [33300.0, 1.0], [136300.0, 3.0], [39700.0, 1.0], [46100.0, 2.0], [47700.0, 1.0], [54100.0, 1.0], [55700.0, 1.0], [56500.0, 1.0], [65300.0, 1.0], [66600.0, 1.0], [69800.0, 1.0], [71400.0, 1.0], [73000.0, 1.0], [74600.0, 1.0], [76200.0, 1.0], [77800.0, 1.0], [81000.0, 1.0], [82600.0, 1.0], [84200.0, 1.0], [87400.0, 1.0], [93800.0, 1.0], [105000.0, 1.0], [111400.0, 1.0], [113000.0, 1.0], [117800.0, 1.0], [127400.0, 1.0], [130600.0, 1.0], [143600.0, 1.0], [141300.0, 1.0], [73700.0, 2.0], [75300.0, 1.0], [83300.0, 1.0], [84900.0, 1.0], [86500.0, 1.0], [91300.0, 1.0], [99300.0, 3.0], [105700.0, 2.0], [120100.0, 2.0], [124900.0, 1.0], [128100.0, 1.0], [129700.0, 1.0], [135800.0, 1.0], [794100.0, 1.0], [17400.0, 1.0], [19000.0, 1.0], [23000.0, 1.0], [23800.0, 1.0], [25400.0, 1.0], [25000.0, 1.0], [25800.0, 1.0], [26200.0, 1.0], [29400.0, 2.0], [30200.0, 1.0], [31400.0, 2.0], [34000.0, 2.0], [33200.0, 1.0], [34800.0, 1.0], [133500.0, 1.0], [146300.0, 2.0], [40400.0, 1.0], [42800.0, 2.0], [43600.0, 1.0], [982500.0, 1.0], [49200.0, 1.0], [50800.0, 1.0], [52400.0, 1.0], [54800.0, 1.0], [62800.0, 1.0], [64400.0, 1.0], [69600.0, 1.0], [71200.0, 1.0], [76000.0, 1.0], [79200.0, 1.0], [84000.0, 1.0], [85600.0, 1.0], [106400.0, 1.0], [104800.0, 1.0], [111200.0, 1.0], [119200.0, 1.0], [125600.0, 1.0], [124000.0, 1.0], [128800.0, 1.0], [136000.0, 2.0], [136900.0, 1.0], [146500.0, 1.0], [970500.0, 1.0], [66300.0, 2.0], [67900.0, 1.0], [85500.0, 1.0], [83900.0, 1.0], [87100.0, 2.0], [95100.0, 1.0], [107900.0, 1.0], [111100.0, 1.0], [115900.0, 1.0], [125500.0, 1.0], [134600.0, 1.0], [132300.0, 1.0], [138700.0, 1.0], [36700.0, 1.0], [145100.0, 1.0], [38300.0, 2.0], [41500.0, 1.0], [48700.0, 1.0], [51100.0, 1.0], [51900.0, 1.0], [53500.0, 3.0], [54300.0, 1.0], [56700.0, 1.0], [55900.0, 1.0], [67000.0, 1.0], [68600.0, 1.0], [76600.0, 1.0], [79800.0, 1.0], [89400.0, 2.0], [92600.0, 1.0], [102200.0, 3.0], [100600.0, 1.0], [110200.0, 3.0], [113400.0, 1.0], [118200.0, 2.0], [119800.0, 1.0], [121400.0, 1.0], [124600.0, 1.0], [139600.0, 1.0], [146000.0, 1.0], [134100.0, 1.0], [146900.0, 1.0], [69300.0, 1.0], [70900.0, 1.0], [75700.0, 1.0], [77300.0, 1.0], [85300.0, 1.0], [88500.0, 2.0], [91700.0, 1.0], [93300.0, 1.0], [102900.0, 1.0], [106100.0, 1.0], [109300.0, 2.0], [107700.0, 1.0], [114100.0, 3.0], [112500.0, 1.0], [115700.0, 1.0], [120500.0, 1.0], [125300.0, 2.0], [128500.0, 1.0], [131800.0, 1.0], [144600.0, 2.0], [17900.0, 1.0], [17500.0, 1.0], [22700.0, 2.0], [24300.0, 1.0], [26700.0, 2.0], [29500.0, 2.0], [30300.0, 1.0], [32300.0, 2.0], [35000.0, 2.0], [35800.0, 1.0], [39800.0, 1.0], [40600.0, 1.0], [43000.0, 1.0], [44600.0, 1.0], [45400.0, 1.0], [46200.0, 1.0], [49400.0, 1.0], [51800.0, 1.0], [56600.0, 1.0], [57400.0, 1.0], [59000.0, 2.0], [61400.0, 1.0], [63000.0, 1.0], [65400.0, 1.0], [68400.0, 1.0], [71600.0, 1.0], [76400.0, 2.0], [81200.0, 1.0], [84400.0, 1.0], [89200.0, 1.0], [90800.0, 1.0], [94000.0, 1.0], [92400.0, 1.0], [102000.0, 1.0], [103600.0, 1.0], [105200.0, 1.0], [106800.0, 2.0], [116400.0, 1.0], [114800.0, 2.0], [118000.0, 1.0], [121200.0, 1.0], [122800.0, 1.0], [124400.0, 1.0], [126000.0, 1.0], [130800.0, 3.0], [127600.0, 1.0]], "isOverall": false, "label": "GET RSS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 983100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 13.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 487.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 487.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 13.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.5, "minX": 1.58766912E12, "maxY": 166.32307692307697, "series": [{"data": [[1.58766912E12, 44.87234042553192], [1.5876693E12, 136.68918918918916], [1.58766948E12, 80.5], [1.58766918E12, 71.71212121212122], [1.58766936E12, 166.32307692307697], [1.58767014E12, 6.5], [1.58766954E12, 28.03225806451613], [1.58766924E12, 103.35820895522386], [1.58766942E12, 149.51562500000003]], "isOverall": false, "label": "GET RSS", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767014E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 47197.6, "minX": 1.0, "maxY": 983138.0, "series": [{"data": [[2.0, 970546.0], [3.0, 780333.0], [4.0, 779732.0], [5.0, 805531.0], [6.0, 959142.0], [7.0, 854728.0], [8.0, 983138.0], [9.0, 959732.0], [10.0, 822318.0], [11.0, 906928.0], [12.0, 982529.0], [13.0, 147096.0], [14.0, 144612.0], [15.0, 145015.0], [17.0, 145712.5], [18.0, 146488.0], [19.0, 146900.0], [20.0, 146019.0], [21.0, 147500.0], [22.0, 146365.0], [23.0, 143972.0], [24.0, 147370.0], [25.0, 146570.0], [26.0, 144767.0], [27.0, 145884.0], [28.0, 144660.0], [29.0, 145056.0], [30.0, 144080.0], [31.0, 143002.0], [33.0, 62787.333333333336], [32.0, 83901.0], [35.0, 58915.666666666664], [34.0, 83203.5], [37.0, 80826.0], [36.0, 50826.25], [39.0, 82525.0], [38.0, 142137.0], [41.0, 83857.5], [40.0, 47533.0], [43.0, 47197.6], [42.0, 81115.5], [45.0, 54851.0], [44.0, 63784.0], [47.0, 84122.0], [46.0, 64693.333333333336], [49.0, 66264.66666666666], [48.0, 83773.5], [50.0, 84937.0], [51.0, 87654.5], [53.0, 52749.6], [52.0, 52103.4], [54.0, 57460.25], [55.0, 58457.25], [56.0, 58532.25], [57.0, 67593.66666666666], [59.0, 69058.66666666666], [58.0, 60306.25], [60.0, 60289.25], [61.0, 86359.5], [63.0, 61571.25], [62.0, 136332.0], [64.0, 69027.66666666667], [66.0, 86566.0], [67.0, 87628.5], [65.0, 132364.0], [68.0, 70230.66666666667], [69.0, 62861.5], [70.0, 64013.75], [71.0, 71730.0], [72.0, 88407.5], [73.0, 73782.33333333333], [75.0, 58229.83333333333], [74.0, 88478.5], [76.0, 72278.66666666667], [79.0, 75265.0], [78.0, 87747.5], [77.0, 88765.0], [80.0, 55266.125], [82.0, 88581.5], [83.0, 90441.5], [81.0, 133453.0], [84.0, 90697.0], [86.0, 68140.75], [87.0, 68054.5], [85.0, 134504.0], [88.0, 75816.66666666667], [89.0, 69268.25], [91.0, 66677.4], [90.0, 90479.5], [92.0, 70155.25], [93.0, 90175.5], [95.0, 68684.6], [94.0, 92175.0], [96.0, 66597.0], [97.0, 91482.5], [98.0, 89745.5], [99.0, 70409.4], [100.0, 80609.0], [101.0, 68382.5], [103.0, 74889.0], [102.0, 72964.5], [104.0, 79934.33333333333], [105.0, 81628.0], [106.0, 91097.5], [107.0, 127464.0], [111.0, 97066.5], [110.0, 83262.66666666667], [109.0, 124301.0], [108.0, 123475.0], [115.0, 74534.0], [114.0, 85310.66666666667], [113.0, 94954.5], [112.0, 85757.66666666667], [116.0, 85418.33333333333], [119.0, 96772.0], [118.0, 98760.5], [117.0, 85672.66666666667], [121.0, 87137.66666666667], [120.0, 85514.66666666667], [123.0, 80378.6], [122.0, 81883.75], [125.0, 82270.5], [124.0, 86609.33333333333], [127.0, 80993.0], [126.0, 84085.75], [130.0, 96815.0], [135.0, 84169.66666666667], [134.0, 84327.4], [133.0, 86606.25], [132.0, 90056.66666666667], [131.0, 89625.33333333333], [129.0, 118029.0], [128.0, 119834.0], [137.0, 87639.25], [136.0, 86002.0], [142.0, 97829.5], [141.0, 84418.55555555556], [140.0, 97497.0], [143.0, 97697.5], [139.0, 114810.0], [138.0, 118438.0], [148.0, 90699.8], [150.0, 85309.5], [149.0, 87531.79999999999], [151.0, 95758.66666666667], [147.0, 114870.0], [146.0, 116124.0], [145.0, 118203.0], [144.0, 115933.0], [152.0, 117287.33333333333], [153.0, 90930.375], [154.0, 101373.5], [155.0, 98294.33333333333], [157.0, 94629.6], [156.0, 96952.0], [158.0, 101741.0], [159.0, 98541.66666666667], [162.0, 95257.85714285714], [161.0, 100685.5], [163.0, 99231.66666666667], [164.0, 99408.0], [167.0, 112208.0], [166.0, 111132.0], [165.0, 110244.0], [160.0, 111230.0], [168.0, 103088.0], [170.0, 103803.0], [174.0, 100900.85714285713], [173.0, 103825.0], [175.0, 104864.0], [172.0, 106826.0], [171.0, 109330.0], [169.0, 116424.0], [176.0, 104700.0], [178.0, 102934.85714285713], [177.0, 105546.0], [179.0, 104219.33333333333], [180.0, 105653.0], [182.0, 104504.5], [183.0, 105724.33333333333], [181.0, 106484.0], [185.0, 106056.5], [184.0, 105949.0], [1.0, 794136.0]], "isOverall": false, "label": "GET RSS", "isController": false}, {"data": [[102.33199999999991, 104257.70999999998]], "isOverall": false, "label": "GET RSS-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 185.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.58766912E12, "maxY": 208694.83333333334, "series": [{"data": [[1.58766912E12, 133267.71666666667], [1.5876693E12, 208694.83333333334], [1.58766948E12, 205645.01666666666], [1.58766918E12, 183482.61666666667], [1.58766936E12, 176742.16666666666], [1.58767014E12, 571.8], [1.58766954E12, 87467.36666666667], [1.58766924E12, 187481.35], [1.58766942E12, 179232.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.58766912E12, 139.43333333333334], [1.5876693E12, 219.53333333333333], [1.58766948E12, 219.53333333333333], [1.58766918E12, 195.8], [1.58766936E12, 192.83333333333334], [1.58767014E12, 0.0], [1.58766954E12, 91.96666666666667], [1.58766924E12, 198.76666666666668], [1.58766942E12, 189.86666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767014E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 26099.680851063833, "minX": 1.58766912E12, "maxY": 883232.7499999999, "series": [{"data": [[1.58766912E12, 26099.680851063833], [1.5876693E12, 77535.81081081084], [1.58766948E12, 132439.0540540541], [1.58766918E12, 40719.33333333335], [1.58766936E12, 97827.6153846154], [1.58767014E12, 883232.7499999999], [1.58766954E12, 144440.90322580645], [1.58766924E12, 58108.835820895525], [1.58766942E12, 114812.59375000004]], "isOverall": false, "label": "GET RSS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767014E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.58766912E12, "maxY": 144130.54838709676, "series": [{"data": [[1.58766912E12, 25344.978723404245], [1.5876693E12, 76560.9864864865], [1.58766948E12, 132051.9864864865], [1.58766918E12, 40180.545454545456], [1.58766936E12, 97422.30769230766], [1.58767014E12, 0.0], [1.58766954E12, 144130.54838709676], [1.58766924E12, 57782.0447761194], [1.58766942E12, 114261.89062500001]], "isOverall": false, "label": "GET RSS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767014E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 299.4189189189189, "minX": 1.58766912E12, "maxY": 2630.25, "series": [{"data": [[1.58766912E12, 354.9787234042553], [1.5876693E12, 299.4189189189189], [1.58766948E12, 373.7162162162162], [1.58766918E12, 546.2727272727274], [1.58766936E12, 374.32307692307694], [1.58767014E12, 2630.25], [1.58766954E12, 548.5806451612902], [1.58766924E12, 448.955223880597], [1.58766942E12, 1089.6093750000002]], "isOverall": false, "label": "GET RSS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767014E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 17492.0, "minX": 1.58766912E12, "maxY": 147500.0, "series": [{"data": [[1.58766912E12, 34017.0], [1.5876693E12, 90863.0], [1.58766948E12, 143283.0], [1.58766918E12, 50598.0], [1.58766936E12, 106851.0], [1.58766954E12, 147500.0], [1.58766924E12, 69337.0], [1.58766942E12, 128184.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.58766912E12, 17492.0], [1.5876693E12, 67977.0], [1.58766948E12, 122815.0], [1.58766918E12, 30341.0], [1.58766936E12, 84965.0], [1.58766954E12, 139361.0], [1.58766924E12, 49021.0], [1.58766942E12, 104864.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.58766912E12, 32360.6], [1.5876693E12, 85632.5], [1.58766948E12, 140222.5], [1.58766918E12, 47597.6], [1.58766936E12, 105160.5], [1.58766954E12, 147056.8], [1.58766924E12, 66847.6], [1.58766942E12, 121189.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.58766912E12, 34017.0], [1.5876693E12, 90863.0], [1.58766948E12, 143283.0], [1.58766918E12, 50598.0], [1.58766936E12, 106851.0], [1.58766954E12, 147500.0], [1.58766924E12, 69337.0], [1.58766942E12, 128184.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.58766912E12, 33125.399999999994], [1.5876693E12, 86584.75], [1.58766948E12, 141299.5], [1.58766918E12, 48864.4], [1.58766936E12, 106071.75], [1.58766954E12, 147422.0], [1.58766924E12, 68213.4], [1.58766942E12, 125013.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58766954E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 50440.0, "minX": 1.0, "maxY": 880828.0, "series": [{"data": [[1.0, 82370.0], [2.0, 84756.0], [4.0, 50440.0], [8.0, 130253.5], [5.0, 97291.0], [3.0, 104148.5], [6.0, 67709.0], [7.0, 105830.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 242796.0], [12.0, 880828.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 12.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 242796.0, "series": [{"data": [[1.0, 80602.5], [2.0, 84030.0], [4.0, 50192.0], [8.0, 130047.0], [5.0, 96767.0], [3.0, 103680.5], [6.0, 67358.5], [7.0, 105562.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 242796.0], [12.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 12.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.58766906E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.58766912E12, 1.6666666666666667], [1.5876693E12, 1.6666666666666667], [1.58766918E12, 1.6666666666666667], [1.58766936E12, 1.6333333333333333], [1.58766906E12, 0.03333333333333333], [1.58766924E12, 1.6666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58766936E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.58766912E12, "maxY": 1.2333333333333334, "series": [{"data": [[1.58766912E12, 0.7833333333333333], [1.5876693E12, 1.2333333333333334], [1.58766948E12, 1.2333333333333334], [1.58766918E12, 1.1], [1.58766936E12, 1.0666666666666667], [1.58766954E12, 0.5166666666666667], [1.58766924E12, 1.1166666666666667], [1.58766942E12, 1.0666666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.58766936E12, 0.016666666666666666]], "isOverall": false, "label": "502", "isController": false}, {"data": [[1.58767014E12, 0.2]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.58767014E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.58766912E12, "maxY": 1.2333333333333334, "series": [{"data": [[1.58766912E12, 0.7833333333333333], [1.5876693E12, 1.2333333333333334], [1.58766948E12, 1.2333333333333334], [1.58766918E12, 1.1], [1.58766936E12, 1.0666666666666667], [1.58766954E12, 0.5166666666666667], [1.58766924E12, 1.1166666666666667], [1.58766942E12, 1.0666666666666667]], "isOverall": false, "label": "GET RSS-success", "isController": false}, {"data": [[1.58766936E12, 0.016666666666666666], [1.58767014E12, 0.2]], "isOverall": false, "label": "GET RSS-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767014E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.58766912E12, "maxY": 1.2333333333333334, "series": [{"data": [[1.58766912E12, 0.7833333333333333], [1.5876693E12, 1.2333333333333334], [1.58766948E12, 1.2333333333333334], [1.58766918E12, 1.1], [1.58766936E12, 1.0666666666666667], [1.58766954E12, 0.5166666666666667], [1.58766924E12, 1.1166666666666667], [1.58766942E12, 1.0666666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.58766936E12, 0.016666666666666666], [1.58767014E12, 0.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.58767014E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

